"""
본 강좌에서는 연산자와 수에 대해 알아봅니다.
특히 정수형 (integers)과 실수형 (floating point numbers)에
초점을 맞춥니다.
"""
# 정수형
# +연산자
# print(2+1)
# print(2+2)
# -연산자
# print(2-1)
# print(3-4)
# *연산자
# print(3*4)
# print(5*6)
# /연산자 (나누기)

"""
/연산자(나누기)는 Python2와 Python3가 다릅니다. 
Python2에서는 나누기의 연산을 정수부분 까지의 결과만 반환하지만
Python3에서는 나누기의 소수부분의 몫을 계산하게 됩니다. 아래의 예제를 확인합시다.
"""

# print(3/2) #결과는 1.5
# print(1/3) #결과는 0.3333333333
"""
재미있는 점은 Python3의 경우 정수형끼리의 나눗셈의 결과가 정수형이 아닌 
실수형 타입으로 반환된다는 것입니다. 만약 정수까지의 결과만은 반환받기 위해서는
다음과 같은 연산자를 활용합니다.
"""

# // 연산자 (나누기의 정수부분까지의 몫만 반환)
# print(3//2) #결과는 1
# print(1//3) #결과는 0

# % 연산자 (나머지)
# print(3%2)
# print(5%3) 


# **연산자 (제곱)
# print(2*10)
# print(2*1024)
# print(2**-2)
# print(2**2 * 2**-2)

# 연산자의 우선순위
"""
연산자의 우선순위에서는 우리가 일반적으로 알고 있는 순위가 지켜집니다.
()의 계산이 제일 먼저 시행되며, 그 다음에는 * / % 와 + -가 실행됩니다.
이때 유의해야 하는 부분은 ** (제곱연산)의 경우에는 일반적인 연산에서의 우선순위가 제일 높으며,
//(정수부까지의 연산)은 * / %와 같은 순위입니다.
"""

# print(2+ 10 * 5 -3) #결과는 49
# print( (2+10) * 5 -3 ) #결과는 57
# print( 2**(10-5) ) #결과는 32
# print( 5*2**2 ) # 결과는 20

# 실수 연산의 문제
"""
컴퓨터에서 실수를 표현하기는 매우 어렵습니다. 간단히 설명하면
컴퓨터는 실수를 표현할 때 정확하게 표현하지 못합니다. 더 정확히 이야기 하면 덜 정밀하게 표현됩니다.
예를 들어 0.1을 표현하면 사용자에게는 0.1을 보여주지만 컴퓨터는 표현할 수 있는 만큼 소수를 표현하고 반올림, 버림을 결정합니다.
다음의 예제를 확인해 봅시다.
"""
# print(0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1) #결과 0.9999999999999999
# print(0.2+0.1) #결과는 0.30000000000000004


"""
변수의 사용
우리가 프로그래밍 할 때, 숫자를 넣은 수들은 모두 메모리에 저장됩니다. 하지만 우리가 다시 쓰기 위해서는
그 메모리에 위치를 알아야만 합니다. 하지만, 컴퓨터가 알고 있는 메모리의 주소를 우리가 기억하기는 매우 어렵습니다.
따라서 이를 쉽게 하기 위해서 변수를 사용하게 됩니다.
"""
# = 연산자 (대입)
"""
= 연산자는 프로그래밍 초기 학습자가 가장 많은 실수를 하게 되는 부분입니다.
일반적인 상황에서의 = 는 같다의 의미를 갖게 되지만, 프로그래밍에서는 대입의 의미를 갖게 됩니다.
즉, 다음과 같이 이해합시다. 
a라는 변수를 선언하고 a에 1을 대입하겠다의 의미입니다.
"""
# a = 1 #a에 1을 대입
# print(a)
# a = a + 5 #a에 5를 더한 후에 다시 a에 대입

#변수간의 연산

# my_score = 100 #my-score 변수에 100을 대입
# count_of_sub = 5 #count_of_sub 변수에 5를 대입
# total_score = my_score * count_of_sub #total_score 에 my_score* count_of_sub 의 결과를 대입
# print(total_score) 

#Python3의 변수 이름 규칙
"""
python3 에서는 a, b, i 와 같은 변수의 이름을 사용하는 것을 지양합니다. 
이것은 프로그래머가 나중에 착각함을 방지하기 위함입니다. 따라서 낱말이나 합성어를 사용할 것을 권장합니다.
일반적으로 언더스코어(케밥룰), 소문자 대문자의 결합(카멜법) 등을 사용하게 됩니다.
변수의 시작은 소문자로 시작하며, 특수문자를 사용하는 것을 지양합니다. 이미 예약된 특수문자들이 있기 때문입니다.
예를 들어 - * / % $ 와 같은 문자들은 이미 예약이 되어 있기 때문입니다.
다만 언더라인의 경우에는 허용이 됩니다.
또한 Python3에서는 UTF8의 규칙을 사용하기 때문에 한글 변수를 사용한 것 역시도 가능합니다만,
다양한 사람들과 소스코드를 나누는 과정에서 오류를 발생시킬 수 있기 때문에 이 역시 지양합니다
"""

# 점수 = 100
# 과목수 = 5
# 총점 = 점수 * 과목수
# print(총점)

# _score = 100
